generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  name        String
  email       String      @unique
  password    String
  avatar      String?
  role        UserRole    @default(USER)
  projects    Project[]   @relation("ProjectOwner")
  memberships Membership[]
  tasks       Task[]      @relation("TaskAssignee")
  comments    Comment[]
  notifications Notification[]
  activities  Activity[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum UserRole {
  USER
  ADMIN
}



model Project {
  id          String        @id @default(uuid())
  title       String
  description String?
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId     String
  memberships Membership[]
  tasks       Task[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Membership {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  project   Project   @relation(fields: [projectId], references: [id])
  projectId String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime  @default(now())
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String
  assignedTo  User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  content   String
  type      NotificationType
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

enum NotificationType {
  TASK_ASSIGNED
  COMMENT_ADDED
  PROJECT_INVITE
}

model Activity {
  id        String   @id @default(uuid())
  action    String
  entity    String
  entityId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  timestamp DateTime @default(now())
}
